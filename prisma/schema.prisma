// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum DOCUMENT_TYPE {
  CPF
  CNPJ
  RG
}

enum ROLE {
  ADMIN
  COMPANY
  INTERVIEWER
  CLIENT
}

enum STATUS_INTERVIEW {
  SCHEDULED
  IN_PROGRESS
  PENDING
  COMPLETED
  CANCELED
}

enum STATUS_APPOINTMENT {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELED
}

enum STATUS_PAYMENT {
  OPEN
  PAID
  PENDING
  CANCELED
  REBUND
  DEFEATED
}

enum STATUS_SIGNATURE {
  CHECKOUT
  ACTIVE
  INACTIVE
  PENDING
  CANCELED
}

enum GENDER {
  MALE
  FEM
  OTHER
}

enum SPECIALTIES {
  CARDIOLOGIA
  DERMATOLOGIA
  ENDOCRINOLOGIA
  GASTROENTEROLOGIA
  GINECOLOGIA
  NEUROLOGIA
  OFTALMOLOGIA
  ORTOPEDIA
  PEDIATRIA
  PSIQUIATRIA
  CLINICA_GERAL
  MEDICINA_DO_TRABALHO
  MEDICINA_PREVENTIVA
}

enum PROFESSIONAL_REGISTRATIONS {
  CRM
  COREM
}

enum PRESCRIPTION_STATUS {
  ACTIVE
  COMPLETED
  SUSPENDED
  CANCELED
}

enum MEDICATION_FREQUENCY {
  ONCE_DAILY
  TWICE_DAILY
  THREE_TIMES_DAILY
  FOUR_TIMES_DAILY
  EVERY_6_HOURS
  EVERY_8_HOURS
  EVERY_12_HOURS
  AS_NEEDED
}

enum MEDICAL_RECORD_TYPE {
  CONSULTATION
  EXAM
  SURGERY
  HOSPITALIZATION
  VACCINATION
  ALLERGY
  CHRONIC_CONDITION
}

model Administrator {
  id         String    @id @default(uuid())
  name       String
  email      String    @unique
  password   String
  role       ROLE
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt
  deleted_at DateTime?

  @@map("administrators")
}

model Plan {
  id                String      @id @default(uuid())
  name              String
  price             String
  interview_limit   Int
  description       String
  created_at        DateTime    @default(now())
  updated_at        DateTime?   @updatedAt
  deleted_at        DateTime?
  signature         Signature[]
  stripe_product_id String      @unique
  stripe_price_id   String?     @unique

  @@map("plans")
}

model Company {
  id                 String        @id @default(uuid())
  corporate_reason   String
  cnpj               String        @unique
  email              String        @unique
  password           String
  phone              String
  role               ROLE
  created_at         DateTime      @default(now())
  updated_at         DateTime?     @updatedAt
  deleted_at         DateTime?
  plan_id            String
  interviewers       Interviewer[]
  clients            Client[]
  contracts          Contract[]
  signature_id       String        @unique
  signature          Signature     @relation(fields: [signature_id], references: [id])
  interviews         Interview[]
  stripe_customer_id String?       @unique

  @@map("companies")
}

model Signature {
  id                         String           @id @default(uuid())
  start_validity             DateTime         @default(now())
  end_validity               DateTime?
  status                     STATUS_SIGNATURE
  invoice                    Invoice[]
  company                    Company?
  plan_id                    String
  plan                       Plan             @relation(fields: [plan_id], references: [id])
  stripe_subscription_id     String?          @unique
  stripe_subscription_status String?

  @@map("signatures")
}

model Invoice {
  id          String         @id @default(uuid())
  mounth      String
  value       String
  issueDate   DateTime
  dueDate     DateTime
  paymentDate DateTime?
  status      STATUS_PAYMENT
  created_at  DateTime       @default(now())
  updated_at  DateTime?      @updatedAt
  deleted_at  DateTime?

  signature_id      String
  signature         Signature @relation(fields: [signature_id], references: [id])
  stripe_invoice_id String    @unique

  @@map("invoices")
}

model Contract {
  id          String    @id @default(uuid())
  title       String
  description String
  image_url   String
  created_at  DateTime  @default(now())
  updated_at  DateTime? @updatedAt
  deleted_at  DateTime?

  company_id String
  company    Company @relation(fields: [company_id], references: [id])

  @@map("contracts")
}

model Interviewer {
  id                        String                     @id @default(uuid())
  name                      String
  email                     String                     @unique
  password                  String
  specialty                 SPECIALTIES
  profissional_registration PROFESSIONAL_REGISTRATIONS
  number_registration       String
  experience                String?
  bio                       String
  role                      ROLE
  created_at                DateTime                   @default(now())
  updated_at                DateTime?                  @updatedAt
  deleted_at                DateTime?

  company_id    String
  company       Company        @relation(fields: [company_id], references: [id])
  interviews    Interview[]
  appointment   Appointment[]
  prescriptions Prescription[]

  @@map("interviewers")
}

model Client {
  id                String        @id @default(uuid())
  name              String
  document_type     DOCUMENT_TYPE
  document          String        @unique
  phone             String
  birth_date        DateTime
  age               Int
  gender            GENDER
  email             String        @unique
  emergency_contact String?
  emergency_phone   String?
  allergies         String?
  medications       String?
  role              ROLE

  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt
  deleted_at DateTime?

  company_id String
  company    Company @relation(fields: [company_id], references: [id])

  appointments      Appointment[]
  interviews        Interview[]
  interview_answers InterviewAnswer[]
  triages           Triage[]
  prescriptions     Prescription[]
  medical_history   MedicalHistory[]
  vital_signs       VitalSigns[]

  @@map("clients")
}

model Interview {
  id             String           @id @default(uuid())
  status         STATUS_INTERVIEW
  interviewer_id String?
  client_id      String
  company_id     String
  created_at     DateTime         @default(now())
  updated_at     DateTime?        @updatedAt
  deleted_at     DateTime?

  interviewer        Interviewer?        @relation(fields: [interviewer_id], references: [id])
  client             Client              @relation(fields: [client_id], references: [id])
  company            Company             @relation(fields: [company_id], references: [id])
  interview_question InterviewQuestion[]
  appointments       Appointment[]
  prescriptions      Prescription[]
  medical_history    MedicalHistory[]
  vital_signs        VitalSigns[]

  @@map("interviews")
}

model Appointment {
  id           String             @id @default(uuid())
  status       STATUS_APPOINTMENT
  scheduled_at DateTime
  created_at   DateTime           @default(now())
  updated_at   DateTime?          @updatedAt
  deleted_at   DateTime?

  client_id String
  client    Client @relation(fields: [client_id], references: [id])

  interviewer_id String?
  interviewer    Interviewer? @relation(fields: [interviewer_id], references: [id])

  specialty SPECIALTIES

  triage_id String?
  triage    Triage? @relation(fields: [triage_id], references: [id])

  interview_id String?
  interview    Interview? @relation(fields: [interview_id], references: [id])
}

model InterviewQuestion {
  id         String    @id @default(uuid())
  question   String
  options    String[]
  required   Boolean   @default(true)
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt
  deleted_at DateTime?

  interview        Interview?        @relation(fields: [interview_id], references: [id])
  interview_id     String?
  interview_answer InterviewAnswer[]
}

model InterviewAnswer {
  id              String    @id @default(uuid())
  client_id       String
  question_id     String
  selected_option String
  created_at      DateTime  @default(now())
  updated_at      DateTime? @updatedAt
  deleted_at      DateTime?

  client             Client            @relation(fields: [client_id], references: [id])
  interview_question InterviewQuestion @relation(fields: [question_id], references: [id])
}

model Triage {
  id          String    @id @default(uuid())
  notes       String?
  vital_signs Json?
  nurse_name  String
  created_at  DateTime  @default(now())
  updated_at  DateTime? @updatedAt
  deleted_at  DateTime?

  client_id   String
  client      Client        @relation(fields: [client_id], references: [id])
  appointment Appointment[]
}

model Prescription {
  id           String              @id @default(uuid())
  status       PRESCRIPTION_STATUS
  diagnosis    String
  instructions String?
  created_at   DateTime            @default(now())
  updated_at   DateTime?           @updatedAt
  deleted_at   DateTime?

  client_id String
  client    Client @relation(fields: [client_id], references: [id])

  interviewer_id String
  interviewer    Interviewer @relation(fields: [interviewer_id], references: [id])

  interview_id String?
  interview    Interview? @relation(fields: [interview_id], references: [id])

  medications Medication[]

  @@map("prescriptions")
}

model Medication {
  id           String               @id @default(uuid())
  name         String
  dosage       String
  frequency    MEDICATION_FREQUENCY
  duration     String
  instructions String?
  created_at   DateTime             @default(now())
  updated_at   DateTime?            @updatedAt
  deleted_at   DateTime?

  prescription_id String
  prescription    Prescription @relation(fields: [prescription_id], references: [id])

  @@map("medications")
}

model MedicalHistory {
  id           String              @id @default(uuid())
  type         MEDICAL_RECORD_TYPE
  title        String
  description  String
  date         DateTime
  doctor_name  String?
  institution  String?
  files        String[]
  observations String?
  created_at   DateTime            @default(now())
  updated_at   DateTime?           @updatedAt
  deleted_at   DateTime?

  client_id String
  client    Client @relation(fields: [client_id], references: [id])

  interview_id String?
  interview    Interview? @relation(fields: [interview_id], references: [id])

  @@map("medical_history")
}

model VitalSigns {
  id                 String    @id @default(uuid())
  systolic_pressure  Int?
  diastolic_pressure Int?
  heart_rate         Int?
  temperature        Float?
  weight             Float?
  height             Float?
  respiratory_rate   Int?
  oxygen_saturation  Int?
  glucose            Int?
  observations       String?
  measured_at        DateTime  @default(now())
  created_at         DateTime  @default(now())
  updated_at         DateTime? @updatedAt
  deleted_at         DateTime?

  client_id String
  client    Client @relation(fields: [client_id], references: [id])

  interview_id String?
  interview    Interview? @relation(fields: [interview_id], references: [id])

  @@map("vital_signs")
}
